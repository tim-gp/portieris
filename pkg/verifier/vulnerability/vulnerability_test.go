// Copyright 2018, 2020 Portieris Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package vulnerability

import (
	"testing"

	"github.com/IBM/portieris/helpers/credential"
	"github.com/IBM/portieris/helpers/image"
	"github.com/IBM/portieris/pkg/apis/securityenforcement/v1beta1"

	"github.com/stretchr/testify/assert"
)

func Test_NewScannerFactory(t *testing.T) {
	f := NewScannerFactory()
	assert.Equal(t, scannerFactory{}, f)
}

func Test_GetScanners(t *testing.T) {
	trueBool := true
	policyDisabled := v1beta1.Policy{}
	policyEnabled := v1beta1.Policy{Vulnerability: v1beta1.Vulnerability{IBMVA: v1beta1.IBMVA{Enabled: &trueBool}}}
	policyWithAccount := v1beta1.Policy{Vulnerability: v1beta1.Vulnerability{IBMVA: v1beta1.IBMVA{Enabled: &trueBool, Account: "123"}}}

	f := NewScannerFactory()

	tests := []struct {
		name        string
		policy      v1beta1.Policy
		credentials credential.Credentials
		expected    []Scanner
	}{
		{
			name:     "Returns no scanners when none in policy",
			policy:   policyDisabled,
			expected: []Scanner{},
		},
		{
			name:     "Returns IBM VA scanner if enabled",
			policy:   policyEnabled,
			expected: []Scanner{&IBMVAClient{}},
		},
		{
			name:     "Account in IBMVA policy is correctly set",
			policy:   policyWithAccount,
			expected: []Scanner{&IBMVAClient{AccountHeader: "123"}},
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			img, _ := image.NewReference("icr.io/sam/ida")
			scanners := f.GetScanners(*img, test.credentials, test.policy)
			assert.Len(t, scanners, len(test.expected))
			for idx := range scanners {
				assert.IsType(t, test.expected[idx], scanners[idx])
			}
			if len(test.expected) > 0 {
				assert.Equal(t, test.policy.Vulnerability.IBMVA.Account, scanners[0].(*IBMVAClient).AccountHeader)
			}
		})
	}
}
